path = "./person_toy/";
path = "./pingpong/";

file_ending= '*.jpgeg'



%LOAD_SYN_IMAGES read from directory image_dir all files with extension png
%   image_dir: path to the image directory
%   nchannel: the image channel to be loaded, default = 1
%
%   image_stack: all images stacked along the 3rd channel
%   scriptV: light directions
files = dir(fullfile(path, '*.jpg'));
nfiles = length(files);

% PARAMETERS
vel_vec_size = 1;
% for edge detection
threshold = 0.03;
window_size =  7;
% for velocity vec
vel_size = 4 ;
patch_size = 9 ;
shift_constant = 0.5;

% allow only odd sized patches
if mod(patch_size, 2) == 0
    error('patch_size must be odd to have the edge as center')
end

%load all images 
for k=1:nfiles
    image_{k} = imread(path+files(k).name );
end

% load first image
image1=im2double(image_{1});
[height,width,dim]=size(image1);

% % apply gaussian smoothing filter before starting
kernel_size = 3 ; 
sigma = 1.0; 
image1 = imfilter(image1, gauss2D(sigma, kernel_size), 'conv');

% determine edges 
[H, row, col] = harris_corner_detector(image1, threshold, window_size);

current_edge_y = row ;
current_edge_x = col ;

number_of_edges = length(row);

for n=1:(nfiles-1)
    n

    image1=im2double(image_toy_{n});
    image2=im2double(image_toy_{n+1});

        % determine windows for optical flow 
        for i=1:number_of_edges

            window_x = [current_edge_x(i)-floor(patch_size/2):current_edge_x(i)+floor(patch_size/2)];
            window_y = [current_edge_y(i)-floor(patch_size/2):current_edge_y(i)+floor(patch_size/2)];

            % cut window if it would lead outside of the image
            window_x=window_x(window_x>0);
            window_y=window_y(window_y>0);

            window_x=window_x(window_x<width+1);
            window_y=window_y(window_y<height+1);


            sub_image1 = image1(window_y,window_x);
            sub_image2 = image2(window_y,window_x);

            vel_vec = estimate_optical_flow(sub_image1, sub_image2);

            vel_vec_x(i) = vel_vec(1); 
            vel_vec_y(i) = vel_vec(2); 

        end  

    %add current edges to image
    image1 = insertMarker(image1,[current_edge_x(:),current_edge_y(:)],'+','color','red','size',3);

    % plot image with flow vectors
    figure(1);
    imshow(image1);
    hold on;
    q = quiver(current_edge_x,current_edge_y, vel_vec_x, vel_vec_y,vel_vec_size);
    q.Color = 'red';

    % write files with velocity vectors and edges to folder
    full_path = sprintf(path+'/Movie/%s.jpg' , num2str(n));
    saveas(gcf,full_path);

    % set the new edges
    current_edge_x = round(current_edge_x + vel_vec_x +sign(vel_vec_x)*shift_constant,0) ; 
    current_edge_y = round(current_edge_y + vel_vec_y +sign(vel_vec_y)*shift_constant,0) ;

    % if due to the shift an edge drops out of the image we clip it 
    current_edge_x(current_edge_x<1)=1;
    current_edge_y(current_edge_y<1)=1;

    current_edge_x(current_edge_x>width)=width;
    current_edge_y(current_edge_y>height)=height;

end











